1. What are the main differences between XMLHttpRequest and Fetch API?
The main difference is that XMLHttpRequest (XHR) is the older way of making network requests and can be a bit harder to read and manage, especially with multiple callbacks. The Fetch API, on the other hand, is newer and uses Promises, making the code cleaner, easier to understand, and more flexible when handling responses.

2. Why is the Fetch API considered more modern and readable?
The Fetch API is considered more modern because it uses Promises instead of callbacks, allowing you to write code that looks simpler and flows naturally. It’s also easier to chain actions, handle errors, and work with async operations, making it more beginner-friendly and less messy.

3. What is the purpose of the .then() and .catch() methods in Fetch?
The .then() method runs after the request is successful — it handles what to do with the data once it’s received. The .catch() method runs if there’s an error — for example, if the network fails or the server can’t be reached. Together, they make it easy to manage success and error cases in a clean way.

4. What happens when you send a POST request to the placeholder API?
When you send a POST request to the placeholder API (like https://jsonplaceholder.typicode.com/posts
), it doesn’t actually save the data since it’s a fake test API. Instead, it returns a response showing the data you sent, along with a newly generated ID, as if a new record was created — just for demonstration purposes.